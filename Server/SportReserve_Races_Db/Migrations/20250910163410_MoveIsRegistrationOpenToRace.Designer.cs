// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportReserve_Races_Db;

#nullable disable

namespace SportReserve_Races_Db.Migrations
{
    [DbContext(typeof(RaceDbContext))]
    [Migration("20250910163410_MoveIsRegistrationOpenToRace")]
    partial class MoveIsRegistrationOpenToRace
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SportReserve_Races_Db.Entities.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfStart")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("EntryFeeGBP")
                        .HasColumnType("float");

                    b.Property<bool>("IsRegistrationOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("images/default_poster.png");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("SportReserve_Races_Db.Entities.RaceTrace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<TimeOnly>("HourOfStart")
                        .HasColumnType("time");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentRaceId")
                        .HasColumnType("int");

                    b.Property<int?>("Slots")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentRaceId");

                    b.ToTable("RaceTraces");
                });

            modelBuilder.Entity("SportReserve_Races_Db.Entities.RaceTrace", b =>
                {
                    b.HasOne("SportReserve_Races_Db.Entities.Race", "Race")
                        .WithMany("RaceTraces")
                        .HasForeignKey("ParentRaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("SportReserve_Races_Db.Entities.Race", b =>
                {
                    b.Navigation("RaceTraces");
                });
#pragma warning restore 612, 618
        }
    }
}
